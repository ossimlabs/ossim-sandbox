properties([
    parameters ([
        string(name: 'BUILD_NODE', defaultValue: 'ossim-build', description: 'The build node to run on'),
        string(name: 'ARTIFACT_TYPE', defaultValue: 'centos-7', description: 'type of artifact to pull'),
        string(name: 'OSSIM_MAKE_JOBS', defaultValue: '8', description: 'Number of jobs for the make system'),
        booleanParam(name: 'DEPLOY_JOMS', defaultValue: true, description: 'Specify whether or not to deploy JOMS'),
        booleanParam(name: 'BUILD_OSSIM_QT4', defaultValue: false, description: 'Specify whether or not to build the OSSIM Qt4 GUI apps'),
        booleanParam(name: 'CLEAN_WORKSPACE', defaultValue: true, description: 'Clean the workspace at the end of the run'),
    ]),
    pipelineTriggers([
            [$class: "GitHubPushTrigger"]
    ]),
    [$class: 'GithubProjectProperty', displayName: '', projectUrlStr: 'https://github.com/ossimlabs/ossim-sandbox'],
    buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '3', daysToKeepStr: '', numToKeepStr: '20')),
    disableConcurrentBuilds()
])
node ("${BUILD_NODE}"){
   env.WORKSPACE = pwd()
   dockerEnv=""
   try{
      env.BRANCH_NAME     ="${BRANCH_NAME}"
      env.DEPLOY_JOMS     ="${DEPLOY_JOMS}"
      env.OSSIM_MAKE_JOBS ="${OSSIM_MAKE_JOBS}"
      env.BUILD_OSSIM_QT4 ="${BUILD_OSSIM_QT4}"
      stage( "Download Artifacts" ) {
          withCredentials([string(credentialsId: 'o2-artifact-project', variable: 'o2ArtifactProject')]) {
               step ([$class: "CopyArtifact",
                  projectName: o2ArtifactProject,
                  filter: "common-*.groovy",
                  flatten: true])
         }
         step ([$class: "CopyArtifact",
            projectName: "ossim-sandbox-docker-multibranch/${BRANCH_NAME}",
            filter: "ossim-base-build-${ARTIFACT_TYPE}.tgz",
            flatten: true])
         step ([$class: "CopyArtifact",
            projectName: "ossim-sandbox-deps-multibranch/${BRANCH_NAME}",
            filter: "ossim-deps-${ARTIFACT_TYPE}-all.tgz",
            flatten: true])
         if (BUILD_OSSIM_QT4 == "true") {
            step ([$class: "CopyArtifact",
               projectName: "build-qt4-dependency",
               filter: "qt4-${ARTIFACT_TYPE}.tgz",
               flatten: true])
         }
         load "common-variables.groovy"
         commonFunctions = load "common-functions.groovy"
         dockerEnv = commonFunctions?.getDockerEnv()
      }
      stage("Checkout"){
         dir("ossim"){
            git branch: "${BRANCH_NAME}",
            url: "${GIT_PUBLIC_SERVER_URL}/ossim.git",
            credentialsId: "${CREDENTIALS_ID}"
         }
         dir("ossim-batch-test"){
            git branch: "${BRANCH_NAME}",
            url: "${GIT_PUBLIC_SERVER_URL}/ossim-batch-test.git",
            credentialsId: "${CREDENTIALS_ID}"
         }
         dir("ossim-video"){
            git branch: "${BRANCH_NAME}",
            url: "${GIT_PUBLIC_SERVER_URL}/ossim-video.git",
            credentialsId: "${CREDENTIALS_ID}"
         }
         dir("ossim-planet"){
            git branch: "${BRANCH_NAME}",
            url: "${GIT_PUBLIC_SERVER_URL}/ossim-planet.git",
            credentialsId: "${CREDENTIALS_ID}"
         }
         dir("ossim-gui"){
            git branch: "${BRANCH_NAME}",
            url: "${GIT_PUBLIC_SERVER_URL}/ossim-gui.git",
            credentialsId: "${CREDENTIALS_ID}"
         }
         dir("ossim-oms"){
            git branch: "${BRANCH_NAME}",
            url: "${GIT_PUBLIC_SERVER_URL}/ossim-oms.git",
            credentialsId: "${CREDENTIALS_ID}"
         }
         dir("ossim-plugins"){
            git branch: "${BRANCH_NAME}",
            url: "${GIT_PUBLIC_SERVER_URL}/ossim-plugins.git",
            credentialsId: "${CREDENTIALS_ID}"
         }
         dir("ossim-wms"){
            git branch: "${BRANCH_NAME}",
            url: "${GIT_PUBLIC_SERVER_URL}/ossim-wms.git",
            credentialsId: "${CREDENTIALS_ID}"
         }
         dir("ossim-private"){
            git branch: "${BRANCH_NAME}",
            url: "${GIT_PRIVATE_SERVER_URL}/ossim-private.git",
            credentialsId: "${CREDENTIALS_ID}"
         }
         dir("ossim-sandbox"){
            git branch: "${BRANCH_NAME}",
            url: "${GIT_PUBLIC_SERVER_URL}/ossim-sandbox.git",
            credentialsId: "${CREDENTIALS_ID}"
         }
         if (BUILD_OSSIM_QT4 == "true") {
            dir("ossim-qt4"){
               git branch: "${BRANCH_NAME}",
               url: "${GIT_PUBLIC_SERVER_URL}/ossim-qt4.git",
               credentialsId: "${CREDENTIALS_ID}"
            }
         }
      }
      stage("Load Build Image"){
         sh "docker load -i ${env.WORKSPACE}/ossim-base-build-${ARTIFACT_TYPE}.tgz"
      }
      stage("Build OSSIM"){
         DOCKER_LABEL = "latest"
         if(BRANCH_NAME == "master") DOCKER_LABEL="master"
         else if(BRANCH_NAME != "dev" ) DOCKER_LABEL=BRANCH_NAME

         dockerEnv += "DEPLOY_JOMS=$DEPLOY_JOMS\n"
         dockerEnv += "OSSIM_MAKE_JOBS=$OSSIM_MAKE_JOBS\n"
         dockerEnv += "MAVEN_DOWNLOAD_URL=$MAVEN_DOWNLOAD_URL\n"
         withCredentials([[$class: 'UsernamePasswordMultiBinding',
               credentialsId: 'nexusCredentials',
               usernameVariable: 'REPOSITORY_MANAGER_USER',
               passwordVariable: 'REPOSITORY_MANAGER_PASSWORD']]) {
               dockerEnv += "REPOSITORY_MANAGER_USER=${REPOSITORY_MANAGER_USER}\n"
               dockerEnv += "REPOSITORY_MANAGER_PASSWORD=${REPOSITORY_MANAGER_PASSWORD}\n"
               writeFile file: "${env.WORKSPACE}/env.txt", text: dockerEnv
               dir( "${ env.WORKSPACE }" ) {

               sh """ossim-sandbox/docker-run.sh \
                  --env-file ${env.WORKSPACE}/env.txt \
                  ossim-base-build-${ARTIFACT_TYPE}:${DOCKER_LABEL} \
                  ossim-sandbox/build-ossim.sh ${ARTIFACT_TYPE}
               """
               }
         }
      }
      stage("Archive")
      {
         archiveArtifacts "ossim-${ARTIFACT_TYPE}-*.tgz"
         archiveArtifacts "ossim-sandbox-${ARTIFACT_TYPE}-*.tgz"
         archiveArtifacts "ossim-docker-slim-${ARTIFACT_TYPE}-*.tgz"
      }
   }
   finally
   {
      stage("Clean Workspace")
      {
         if ("${CLEAN_WORKSPACE}" == "true")
            step([$class: 'WsCleanup'])
      }
   }
}
