properties([
    parameters ([
        string(name: 'BUILD_NODE', defaultValue: 'ossim-build', description: 'The build node to run on'),
        string(name: 'REGISTRY_URL', defaultValue: 'quay.io/radiantsolutions', description: 'REGISTRY_URL to push to'),
         string(name: 'ARTIFACT_TYPE', defaultValue: 'centos-7', description: 'type of artifact to pull'),
       booleanParam(name: 'CLEAN_WORKSPACE', defaultValue: true, description: 'Clean the workspace at the end of the run')
    ]),
    pipelineTriggers([
            [$class: "GitHubPushTrigger"]
    ]),
    [$class: 'GithubProjectProperty', displayName: '', projectUrlStr: 'https://github.com/ossimlabs/ossim-sandbox'],
    buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '3', daysToKeepStr: '', numToKeepStr: '20')),
    disableConcurrentBuilds()
])
node ("${BUILD_NODE}"){
   TAG_NAME="latest"
   if ("$BRANCH_NAME" == "master") {
      TAG_NAME="master"
   } 
   ossimBuildDockerfile="${WORKSPACE}/ossimBuildDockerfile"
   ossimBuildDockerfileText="""
   FROM ossim-base-build-${ARTIFACT_TYPE}:${TAG_NAME}
   ADD ossim-deps-${ARTIFACT_TYPE}-all.tgz /usr/local/
   """
   ossimDevelDockerfile="${WORKSPACE}/ossimDevelDockerfile"
   ossimDevelDockerfileText="""
   FROM ossim-base-build-${ARTIFACT_TYPE}:${TAG_NAME}
   ADD ossim-deps-${ARTIFACT_TYPE}-all.tgz /usr/local/
   ADD ossim-${ARTIFACT_TYPE}-all.tgz /usr/local/
   """
   try{
      stage( "Download Artifacts" ) {
         withCredentials([string(credentialsId: 'o2-artifact-project', variable: 'o2ArtifactProject')]) {
               step ([$class: "CopyArtifact",
                  projectName: o2ArtifactProject,
                  filter: "common-variables.groovy",
                  flatten: true])
         }
         step ([$class: "CopyArtifact",
            projectName: "ossim-sandbox-deps-multibranch/${BRANCH_NAME}",
            filter: "ossim-deps-${ARTIFACT_TYPE}-all.tgz",
            flatten: true])
         step ([$class: "CopyArtifact",
            projectName: "ossim-sandbox-docker-multibranch/${BRANCH_NAME}",
            filter: "ossim-base-build-${ARTIFACT_TYPE}.tgz",
            flatten: true])
        step ([$class: "CopyArtifact",
            projectName: "ossim-sandbox-ossimbuild-multibranch/${BRANCH_NAME}",
            filter: "ossim-${ARTIFACT_TYPE}-all.tgz",
            flatten: true])
         load "common-variables.groovy"
      }
      stage("Checkout"){
         dir("ossim-sandbox"){
            git branch: "${BRANCH_NAME}",
            url: "${GIT_PUBLIC_SERVER_URL}/ossim-sandbox.git",
            credentialsId: "${CREDENTIALS_ID}"
         }

      }
      stage("Create Build Image"){
         writeFile file: ossimBuildDockerfile, text: ossimBuildDockerfileText
         writeFile file: ossimDevelDockerfile, text: ossimDevelDockerfileText
         
      }
      stage ("Publish OSSIM Build Image")
      {
         if ("$BRANCH_NAME" == "master") {
            TAG_NAME="master"
         } 
      //   withCredentials([[$class: 'UsernamePasswordMultiBinding',
      //                      credentialsId: 'dockerCredentials',
      //                      usernameVariable: 'DOCKER_REGISTRY_USERNAME',
      //                      passwordVariable: 'DOCKER_REGISTRY_PASSWORD']])
      //    {
            dir("${WORKSPACE}"){
               // if(DOCKER_REGISTRY_USERNAME&&DOCKER_REGISTRY_PASSWORD)
               // {
               //    sh "docker login -u ${DOCKER_REGISTRY_USERNAME} -p ${DOCKER_REGISTRY_PASSWORD} ${REGISTRY_URL}"
               // }
               sh """
               docker load -i ossim-base-build-${ARTIFACT_TYPE}.tgz
               docker build -t ossim-build-${ARTIFACT_TYPE}:${TAG_NAME} -f ${ossimBuildDockerfile} ${WORKSPACE}
               docker build -t ossim-devel-${ARTIFACT_TYPE}:${TAG_NAME} -f ${ossimDevelDockerfile} ${WORKSPACE}
               ossim-sandbox/save-image.sh ossim-build-${ARTIFACT_TYPE} ${TAG_NAME} ossim-build-${ARTIFACT_TYPE}-${TAG_NAME}.tgz
               ossim-sandbox/save-image.sh ossim-devel-${ARTIFACT_TYPE} ${TAG_NAME} ossim-devel-${ARTIFACT_TYPE}-${TAG_NAME}.tgz
               """
            // }
         }
      }
      stage("Archive")
      {
         archiveArtifacts "ossim-build-${ARTIFACT_TYPE}-${TAG_NAME}.tgz"
         archiveArtifacts "ossim-devel-${ARTIFACT_TYPE}-${TAG_NAME}.tgz"
         
      }
   }
   finally
   {
      stage("Clean Workspace")
      {
         if ("${CLEAN_WORKSPACE}" == "true")
            step([$class: 'WsCleanup'])
      }
   }
}