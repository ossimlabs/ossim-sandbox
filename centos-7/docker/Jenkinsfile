properties([
    parameters ([
        string(name: 'BUILD_NODE', defaultValue: 'ossim-build', description: 'The build node to run on'),
         string(name: 'ARTIFACT_TYPE', defaultValue: 'centos-7', description: 'type of artifact to pull'),
       booleanParam(name: 'CLEAN_WORKSPACE', defaultValue: true, description: 'Clean the workspace at the end of the run')
    ]),
    pipelineTriggers([
            [$class: "GitHubPushTrigger"]
    ]),
    [$class: 'GithubProjectProperty', displayName: '', projectUrlStr: 'https://github.com/ossimlabs/ossim-sandbox'],
    buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '3', daysToKeepStr: '', numToKeepStr: '20')),
    disableConcurrentBuilds()
])
node ("${BUILD_NODE}"){
   TAG_NAME="latest"
   try{
      stage( "Download Artifacts" ) {
         withCredentials([string(credentialsId: 'o2-artifact-project', variable: 'o2ArtifactProject')]) {
               step ([$class: "CopyArtifact",
                  projectName: o2ArtifactProject,
                  filter: "common-variables.groovy",
                  flatten: true])
         }
         load "common-variables.groovy"
      }
      stage("Checkout"){
         dir("ossim-sandbox"){
            git branch: "${BRANCH_NAME}",
            url: "${GIT_PUBLIC_SERVER_URL}/ossim-sandbox.git",
            credentialsId: "${CREDENTIALS_ID}"
         }

      }
      stage("Create Build Image"){
         sh "${env.WORKSPACE}/ossim-sandbox/create-build-image.sh ${ARTIFACT_TYPE}"
      }
      stage ("Publish Base Build Image")
      {
         if ("$BRANCH_NAME" == "master") {
            TAG_NAME="master"
         } 
        withCredentials([[$class: 'UsernamePasswordMultiBinding',
                           credentialsId: 'dockerCredentials',
                           usernameVariable: 'DOCKER_REGISTRY_USERNAME',
                           passwordVariable: 'DOCKER_REGISTRY_PASSWORD']])
         {
            dir("${WORKSPACE}/ossim-sandbox"){
               sh """
               gradle --debug  pushDockerImage -PdockerImageTag=${TAG_NAME} -ProotProjectName=ossim-build-${ARTIFACT_TYPE}\
                  -PossimMavenProxy=${OSSIM_MAVEN_PROXY}
               """
            }
         }
      }
      stage("Archive")
      {
         archiveArtifacts "*.tgz"
      }
   }
   finally
   {
      stage("Clean Workspace")
      {
         if ("${CLEAN_WORKSPACE}" == "true")
            step([$class: 'WsCleanup'])
      }
   }
}